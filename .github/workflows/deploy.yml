name: Deploy to VPS

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: loganrenz
          password: ${{ secrets.GH_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/stock-pick-game:latest
            ghcr.io/${{ github.repository_owner }}/stock-pick-game:${{ github.sha }}
          no-cache: true

      - name: SSH to VPS and deploy with docker compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: root
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /root/stock-pick-game
            # Force pull the latest image
            docker pull ghcr.io/${{ github.repository_owner }}/stock-pick-game:${{ github.sha }}
            # Backup SQLite DB before deployment
            mkdir -p backups
            docker cp stock_pick_game:/data/dev.db backups/dev-$(date +%Y%m%d%H%M%S).db || true
            # Stop and remove existing containers
            docker-compose down
            # Copy the latest docker-compose.yml
            cat > docker-compose.yml << 'EOL'
            version: '3.8'

            services:
              stock_pick_game:
                image: ghcr.io/${{ github.repository_owner }}/stock-pick-game:${{ github.sha }}
                environment:
                  - NODE_ENV=production
                  - PORT=4556
                  - DATABASE_URL=file:/data/dev.db
                  - DATABASE_PROVIDER=sqlite
                ports:
                  - "4556:4556"
                  - "5173:5173"
                volumes:
                  - ./data:/data
                restart: always

            networks:
              default:
                driver: bridge
            EOL
            # Start services
            docker-compose up -d --remove-orphans
            # Wait for services to be ready
            sleep 10
            # Check if services are running
            docker ps 